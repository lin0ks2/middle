/*!
 * ui.setup.modal.js ‚Äî –º–∞—Å—Ç–µ—Ä –Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 * –í–µ—Ä—Å–∏—è: 1.6.2-uiheaderfix
 *
 * –õ–æ–≥–∏–∫–∞ –Ω–µ –∏–∑–º–µ–Ω—è–ª–∞—Å—å: —Ç–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
 *  1. –î–æ–±–∞–≤–ª–µ–Ω–∞ —à–∞–ø–∫–∞ .modalHeader —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º .modalTitle
 *  2. –ü–µ—Ä–µ–Ω–µ—Å—ë–Ω —Ç–µ–∫—Å—Ç ¬´–ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞¬ª –≤ —ç—Ç—É —à–∞–ø–∫—É
 *  3. –í rerenderStaticLabels –æ–±–Ω–æ–≤–ª—ë–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞
 */

(function(){
  'use strict';

  const D = document;
  const W = window;
  const KEY = 'Lexitron.SetupDone';

  // –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (fallback)
  const lab = {
    setupTitle: '–ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞',
    ok: 'OK'
  };

  // ----------------------------------------------------------
  // –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä—Å—Ç–∫–∏ –º–æ–¥–∞–ª–∫–∏
  // ----------------------------------------------------------
  function build(){
    const code = (App?.state?.lang) || 'ru';
    const I = W.I18N?.[code] || {};

    const labelSetup = I.setupTitle || lab.setupTitle;
    const labelOk    = I.ok || lab.ok;

    const m = D.createElement('div');
    m.id = 'setupModal';
    m.className = 'modal hidden';
    m.innerHTML = `
      <div class="backdrop"></div>
      <div class="dialog">
        <div class="modalHeader">
          <h3 class="modalTitle">${labelSetup}</h3>
        </div>
        <div class="langFlags" id="setupLangFlags">
          <!-- —Å—é–¥–∞ –≤—Å—Ç–∞–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏ —Ñ–ª–∞–≥–æ–≤ -->
        </div>
        <div class="modalActions">
          <button id="setupOkBtn" class="btn primary">${labelOk}</button>
        </div>
      </div>
    `;
    D.body.appendChild(m);
    return m;
  }

  // ----------------------------------------------------------
  // –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  // ----------------------------------------------------------
  function rerenderStaticLabels(code){
    const m = D.getElementById('setupModal');
    if(!m) return;
    m.querySelector('.modalTitle').textContent =
      (W.I18N?.[code]?.setupTitle) || lab.setupTitle;
    m.querySelector('#setupOkBtn').textContent =
      (W.I18N?.[code]?.ok) || lab.ok;
  }

  // ----------------------------------------------------------
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä–∞
  // ----------------------------------------------------------
  function init(){
    if(localStorage.getItem(KEY)) return;     // –º–∞—Å—Ç–µ—Ä —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏
    const modal = build();

    const flags = modal.querySelector('#setupLangFlags');
    if(App.locales){
      Object.keys(App.locales).forEach(lang=>{
        const btn = D.createElement('button');
        btn.className = 'flagBtn';
        btn.textContent = App.locales[lang].flag || 'üè≥Ô∏è';
        btn.title = App.locales[lang].name || lang;
        btn.addEventListener('click',()=>{
          App.saveSettings({ lang });
          rerenderStaticLabels(lang);
        });
        flags.appendChild(btn);
      });
    }

    modal.classList.remove('hidden');
    const okBtn = modal.querySelector('#setupOkBtn');
    okBtn.addEventListener('click',()=>{
      localStorage.setItem(KEY,'1');
      modal.classList.add('hidden');
      App.startup?.();
    });

    // –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    D.addEventListener('lexitron:lang-changed', e=>{
      rerenderStaticLabels(e.detail?.lang);
    });
  }

  if(D.readyState === 'loading') {
    D.addEventListener('DOMContentLoaded', init, {once:true});
  } else {
    init();
  }

})();